apply plugin: 'com.android.application'

android {
    compileSdkVersion project.properties.compileSdkVersion.toInteger()
    def appVersionName = System.getenv("TERMUX_API_APP_VERSION_NAME") ?: ""
    def apkVersionTag = System.getenv("TERMUX_API_APK_VERSION_TAG") ?: ""

    defaultConfig {
        applicationId "com.termux.api"
        minSdkVersion project.properties.minSdkVersion.toInteger()
        targetSdkVersion project.properties.targetSdkVersion.toInteger()
        versionCode 51
        versionName "0.50.1"

        if (appVersionName) versionName = appVersionName
        validateVersionName(versionName)

        manifestPlaceholders.TERMUX_PACKAGE_NAME = "com.termux"
        manifestPlaceholders.TERMUX_APP_NAME = "Termux"
        manifestPlaceholders.TERMUX_API_APP_NAME = "Termux:API"
    }

    signingConfigs {
        debug {
            storeFile file('testkey_untrusted.jks')
            keyAlias 'alias'
            storePassword 'xrj45yWGLbsO7W0v'
            keyPassword 'xrj45yWGLbsO7W0v'
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            shrinkResources false // Reproducible builds
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }

        debug {
            signingConfig signingConfigs.debug
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8

        coreLibraryDesugaringEnabled true
    }

    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            if (variant.buildType.name == "debug") {
                outputFileName = new File("termux-api_" + (apkVersionTag ? apkVersionTag : "debug") + ".apk")
            } else if (variant.buildType.name == "release") {
                outputFileName = new File("termux-api_" + (apkVersionTag ? apkVersionTag : "release") + ".apk")
            }
        }
    }

    packagingOptions {
        // Remove terminal-emulator and termux-shared JNI libs added via termux-shared dependency
        exclude 'lib/*/libtermux.so'
        exclude 'lib/*/liblocal-socket.so'
    }
}

dependencies {
    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:1.2.3'

    implementation 'com.google.android.material:material:1.4.0'
    implementation 'androidx.biometric:biometric:1.2.0-alpha03'
    implementation "androidx.work:work-runtime:2.6.0"
    implementation "androidx.concurrent:concurrent-futures:1.1.0"
    implementation 'androidx.media:media:1.4.3'
    implementation 'com.cronutils:cron-utils:9.2.0'
    implementation 'com.google.code.gson:gson:2.10.1'
    implementation "com.google.guava:guava:24.1-android"
    implementation 'com.google.guava:listenablefuture:9999.0-empty-to-avoid-conflict-with-guava'

    implementation 'com.termux.termux-app:termux-shared:8c1749ef96'
    // Use if below libraries are published locally by termux-app with `./gradlew publishReleasePublicationToMavenLocal` and used with `mavenLocal()`.
    // If updates are done, republish there and sync project with gradle files here
    // https://github.com/termux/termux-app/wiki/Termux-Libraries
    // implementation 'com.termux:termux-shared:0.118.0'
}

task versionName {
    doLast {
        print android.defaultConfig.versionName
    }
}

@SuppressWarnings("UnnecessaryQualifiedReference")
static def validateVersionName(String versionName) {
    // https://semver.org/spec/v2.0.0.html#is-there-a-suggested-regular-expression-regex-to-check-a-semver-string
    // ^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$
    if (!java.util.regex.Pattern.matches("^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?\$", versionName))
        throw new GradleException("The versionName '" + versionName + "' is not a valid version as per semantic version '2.0.0' spec in the format 'major.minor.patch(-prerelease)(+buildmetadata)'. https://semver.org/spec/v2.0.0.html.")
}
